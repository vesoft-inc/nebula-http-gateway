// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
	"../../github.com/vesoft-inc/nebula-http-gateway/ccore/nebula/internal/thrift/v2_5/storage"
	"flag"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  KVGetResponse get(KVGetRequest req)")
	fmt.Fprintln(os.Stderr, "  ExecResponse put(KVPutRequest req)")
	fmt.Fprintln(os.Stderr, "  ExecResponse remove(KVRemoveRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.Transport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.ProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := storage.NewGeneralStorageServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "get":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Get requires 1 args")
			flag.Usage()
		}
		arg258 := flag.Arg(1)
		mbTrans259 := thrift.NewMemoryBufferLen(len(arg258))
		defer mbTrans259.Close()
		_, err260 := mbTrans259.WriteString(arg258)
		if err260 != nil {
			Usage()
			return
		}
		factory261 := thrift.NewSimpleJSONProtocolFactory()
		jsProt262 := factory261.GetProtocol(mbTrans259)
		argvalue0 := storage.NewKVGetRequest()
		err263 := argvalue0.Read(jsProt262)
		if err263 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Get(value0))
		fmt.Print("\n")
		break
	case "put":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Put requires 1 args")
			flag.Usage()
		}
		arg264 := flag.Arg(1)
		mbTrans265 := thrift.NewMemoryBufferLen(len(arg264))
		defer mbTrans265.Close()
		_, err266 := mbTrans265.WriteString(arg264)
		if err266 != nil {
			Usage()
			return
		}
		factory267 := thrift.NewSimpleJSONProtocolFactory()
		jsProt268 := factory267.GetProtocol(mbTrans265)
		argvalue0 := storage.NewKVPutRequest()
		err269 := argvalue0.Read(jsProt268)
		if err269 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Put(value0))
		fmt.Print("\n")
		break
	case "remove":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Remove requires 1 args")
			flag.Usage()
		}
		arg270 := flag.Arg(1)
		mbTrans271 := thrift.NewMemoryBufferLen(len(arg270))
		defer mbTrans271.Close()
		_, err272 := mbTrans271.WriteString(arg270)
		if err272 != nil {
			Usage()
			return
		}
		factory273 := thrift.NewSimpleJSONProtocolFactory()
		jsProt274 := factory273.GetProtocol(mbTrans271)
		argvalue0 := storage.NewKVRemoveRequest()
		err275 := argvalue0.Read(jsProt274)
		if err275 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Remove(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
